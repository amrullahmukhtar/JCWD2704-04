// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Users {
  id       String  @id @default(cuid())
  email    String  @unique @db.VarChar(85)
  password String?

  fullname String? @db.VarChar(85)
  gender   Gender?
  googleId String?

  role             Role    @default(user)
  // USER
  curriculum_vitae Bytes?
  avatar           Bytes?
  avatarUrl        String?
  cvUrl            String?
  phone_no         String? @db.VarChar(25)

  address    String? @db.VarChar(255)
  age        Int?
  education  String?
  position   String?
  experience String?

  kota_kabupaten      String?
  provinsi            String?
  date_of_birth       DateTime?
  salary_expectations Int?
  subs_mode           Subs_mode @default(none)
  subs_start_date     DateTime?
  subs_end_date       DateTime?

  // ADMIN
  company_name     String? @db.VarChar(100)
  company_logo     Bytes?
  company_summary  String? @db.Text
  company_location String? @db.VarChar(255)
  contact_email    String? @db.VarChar(50)
  contact_phone    String? @db.VarChar(25)

  // DEVELOPER
  bank_acc_no String? @db.VarChar(75)
  id_card     String? @unique @db.VarChar(16)

  is_verified Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Career_history   Career_history[]
  Certification    Certification[]
  Education        Education[]
  Skill            Skill[]
  Assessment       Assessment[]
  Skill_assessment Skill_assessment[]
  User_answer      User_answer[]
  Transaction      Transaction[]
  Company_content  Company_content[]
  Job              Job[]
  Job_regis        Job_regis[]

  @@index([fullname, email, role])
  @@map("users")
}

enum Role {
  user
  admin
  developer
}

enum Gender {
  male
  female
}

enum Subs_mode {
  none
  standard
  premium
}

model Career_history {
  id           Int      @id @default(autoincrement())
  user_id      String
  title        String   @db.VarChar(100)
  company_name String   @db.VarChar(100)
  start_date   DateTime
  end_date     DateTime
  details      String   @db.Text

  user Users @relation(fields: [user_id], references: [id])

  @@map("career_histories")
}

model Company_content {
  id         Int    @id @default(autoincrement())
  company_id String
  content    String @db.Text

  user Users @relation(fields: [company_id], references: [id])

  @@map("company_content")
}

model Certification {
  id          Int      @id @default(autoincrement())
  user_id     String
  title       String   @db.VarChar(100)
  earned_date DateTime
  user        Users    @relation(fields: [user_id], references: [id])

  @@map("certifications")
}

model Education {
  id               Int      @id @default(autoincrement())
  user_id          String
  institution_name String   @db.VarChar(100)
  details          String   @db.Text
  start_date       DateTime
  end_date         DateTime

  user Users @relation(fields: [user_id], references: [id])

  @@map("educations")
}

model Skill {
  id      Int    @id @default(autoincrement())
  user_id String
  title   String @db.VarChar(85)
  details String @db.Text

  user Users @relation(fields: [user_id], references: [id])

  @@map("skills")
}

enum Post_status {
  published
  finished
}

model Job {
  id            Int         @id @default(autoincrement())
  admin_id      String
  title         String      @db.VarChar(100)
  hire_position String
  description   String      @db.Text
  location      String
  posted_date   DateTime
  status        Post_status @default(published)
  closing_date  DateTime
  longitude     Float
  latitude      Float

  avatarUrl    String?
  company_name String?     @db.VarChar(100)
  company      Users       @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  Job_regis    Job_regis[]

  @@map("jobs")
}

enum Regis_status {
  pending
  accepted
  rejected
}

model Job_regis {
  job_id             Int          @id
  user_id            String
  application_date   DateTime
  salary_expectation Float
  status             Regis_status @default(pending)
  interview_date     DateTime?
  review             String?      @db.Text

  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  job  Job   @relation(fields: [job_id], references: [id], onDelete: Cascade)

  @@unique([job_id, user_id])
  @@map("job_registrations")
}

model Assessment {
  id           String   @id @default(cuid())
  developer_id String
  title        String   @db.Text
  created_at   DateTime

  user             Users              @relation(fields: [developer_id], references: [id])
  Skill_assessment Skill_assessment[]
  Question         Question[]

  @@map("assessments")
}

model Skill_assessment {
  user_id       String?
  assessment_id String
  score         Int
  completed_at  DateTime

  user       Users?     @relation(fields: [user_id], references: [id])
  assessment Assessment @relation(fields: [assessment_id], references: [id])

  @@id([assessment_id])
  @@map("skill_assessments")
}

model Question {
  id            Int    @id
  assessment_id String
  question      String @db.Text

  assessment  Assessment    @relation(fields: [assessment_id], references: [id])
  Answer      Answer[]
  User_answer User_answer[]

  @@map("questions")
}

enum Answer_status {
  correct
  wrong
}

model Answer {
  id          Int           @id
  question_id Int
  answer      String        @db.Text
  status      Answer_status @default(wrong)

  question Question @relation(fields: [question_id], references: [id])

  @@map("answers")
}

model User_answer {
  user_id     String
  question_id Int
  answer      String @db.Text

  user     Users    @relation(fields: [user_id], references: [id])
  question Question @relation(fields: [question_id], references: [id])

  @@id([user_id, question_id])
  @@map("user_answers")
}

enum Transaction_status {
  unpaid
  pending
  success
  cancelled
}

model Transaction {
  id             String             @id @default(cuid())
  user_id        String
  invoice_code   String
  transfer_proof String?
  status         Transaction_status @default(unpaid)
  paid_at        DateTime?

  user Users @relation(fields: [user_id], references: [id])

  @@map("transactions")
}
